plugins {
	id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'jacoco'
    id 'org.sonarqube' version "3.3"
}

compileJava.options.encoding = 'UTF-8'

// ========================== Jacoco and Sonarqube config ================================

// Getting Jacoco Test Report executable
def allTestCoverageFile = "${rootProject.buildDir}/jacoco/allTestCoverage.exec" as Object
task jacocoMerge(type: JacocoMerge, group: 'verification') {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}



group = 'com.bookstore'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '18'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


// ================================ Tests ================================
// Configuration to jacoco produce xml
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

jacoco { 
    toolVersion = "0.8.8"    
}

test {
	useJUnitPlatform()
	testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    finalizedBy jacocoTestReport
}
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

//Sonar Config
sonarqube {
    properties {
        property "sonar.projectKey", "lucasraziel_bookstore"
        property "sonar.organization", "lucasraziel"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.qualitygate.wait", true
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}